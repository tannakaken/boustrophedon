import { BrowserRouter, Link, Route, Routes } from 'react-router-dom';
import './App.css'
import { Boustrophedon } from './Boustrophedon';
import NovelViewer from './Novel';
import { sample } from './assets/sample.novel';

/* eslint-disable no-irregular-whitespace */
const description = `牛耕式（ブストロフェドン）というものを知っているだろうか？　知らないのならば、今目の前にあるものがそれである。
通常、現在のヨーロッパ系言語は左からの横書きで表示されることが多い。アラビア語やヘブライ語などのセム系の言語は右からの横書きのものも多い。
しかし、古代においてはギリシャ語やラテン語なども右から表記されることも多かった。そして碑文などに刻まれたさらに古いギリシャ語やセム系の言語の中には、一行ずつ左右が切り替わる書き方をされているものもあるのだ。
それを牛が畑を耕す仕方に例えて牛耕式（ブストロフェドン）と呼ぶのだ。
歴史的に見ても古代エジプトのヒエログリフなどは決まった文字の進む方向を持たなかった。書かれた文字の方向、つまり人物や動物の見ている方向に文字は進んでいく。
同じように牛耕式のギリシャ語も、左から進む場合と右から進む場合で文字が左右反転する。それによって、今現在どちらからどちらへと進んでいるのかが分かるようになっているのだ。これなら途中から読むのにも問題は起きない。
現代的な書記法と比べて、牛耕式は書くのにも読むのにも、とても効率的だ。左横書きにしても右横書きにしても、行末では次の行の行頭へと最大1行分、ペンおよび視線が無駄に移動しなくてはいけない。段落の終わりで平均的に0.5行分の無駄な移動が発生すると考えると、段落の途中では必ず1行分の無駄な移動が発生するので、平均して0.5行以上の無駄な移動が1行ごとに発生する。1行がそれほど長くなく、段落がそこそこの長さになる通常の文章においては、かなりの量の無駄な視線移動が発生することがわかるであろう。
それに対して牛耕式の書記法では、段落の途中においては、全く無駄なくスムーズに次の行に移れる。無駄な移動が行われるのは段落の終わりだけである。つまり平均して1行ごとに0.5行を大きく下回る無駄な視線移動しか発生しないのだ。
このような素晴らしい効率性を持った牛耕式であるが、時とともに廃れて、左横書きか右横書きへと収束していった。
なぜであろうか？
その理由の一つは、編集のしにくさであろう。ブストロフェドンでノートをとっていて、ある行と次の行の間に1行加えたくなったらどうすればいいのだろうか？　1行だけ加えてしまうと、それ以降が全ておかしくなってしまうのだ。仕方がないから、もう1行、特に何の意味もない行も加えなくていけなくなってしまう。こんなことは不条理であろう。
これを、現代のデータベース理論における「追記型アーキテクチャ vs 編集型アーキテクチャ」「トランザクションデータ vs マスターデータ」の二項対立と見比べてみても、面白いかもしれない。
今回私は、なんとなくWeb上で牛耕式の文章を表示する方法を考えてみたので、せっかくだから牛耕式で表示させる小説を募集してみようと思う。
コンピュータ上でなら、編集時の煩雑さをUIでカバーすることもそれほど難しくはない。
現代の時間の流れを忘れ、牛が犂を引っ張るのを眺めるような行きつ戻りつするゆっくりした時間を表現してみたら、いいのではなかろうか。`;

const reverseDescription = `裏サイトへようこそ。
このページを見つけたあなたは、恐らく牛耕式の説明に納得しなかった反抗心にあふれる人たちではないかと思います。
そうです。牛耕式は変なのです。
だって、牛が畑を耕す時に、左右反対になりますか？　鏡に映ったみたいに？　それでは、行って戻ってる途中の牛の体を作るアミノ酸は鏡像異性体なのか？　行って戻ってる途中の牛が草を食べても消化吸収できないのか？
そんなことはあるまい！
牛が畑を耕すときの動きを考えればわかるが、牛が畑の端で折り返すとき、起こるのは鏡像変換ではなく、180度回転である。
古代ギリシャ人は牛が畑を耕す様子をちゃんと見なさい！
ちなみに、このような表記体系のことを逆牛耕法（リバース・プストロフェドン）と呼ぶ。しかし、実際にはこちらが、正しい牛耕法とも言えるだろう。
それでは、このような表記体系の文字は存在したのか？
一つの例がラパ・ヌイ、いわゆるイースター島の木版やなどに掘られたロンゴロンゴと呼ばれる未解読の文字である。
木片に書かれた文字を現地住民は左下から読み始め、一行を読み終わると、木片をひっくり返して先ほど読んだ行の下の行（ひっくり返す前は上だった行）をまた左から読んでいき、その行が終わると、また木片をひっくり返して先ほど読んだ行の上の行（ひっくり返す前は下だった行）を読み始めた、と言われている。
ということは、この表記体系は下から読み始める、世にも奇妙な表記体系だったのだ。ただし木片の裏まで文字が続いている場合、裏は左上から読んだようだ。つまり、下から読むこともあり、上から読むこともある。裏表をどうやって区別していたのか、私にはよくわからない。
このロンゴロンゴが本当に文字だったのかについては、疑問も呈されている。ロンゴロンゴが発見されたときのラパ・ヌイはヨーロッパ人のもたらした疫病と奴隷狩りによって人口が激減している。そんな状態だから、そもそも残された資料が少ないし、残っているものも保存状態が良くなく、それらが本物なのか、それとも観光客向けに捏造されたものなのかすらわからない。
一説では、ヨーロッパ人との接触で、文字の存在を知った島民が、文字らしきものを捏造したのでは、という説もある。
本当のところはよくわからない。だが、これが文字であったにしろ、文字でなかったにしろ、牛のいない島に住んでいた彼らが、正しい牛の畑の耕し方にたどり着いたことを、私はとにもかくにも言祝ぎたい。
そこで、ロンゴロンゴ式牛耕式の表示も可能にすることにしたのだ。
ただし、読む方向は左上からにした。下から表示する方法はWebではとても不便だ。それに、今目の前で、逆牛耕法の文字列を体験している皆さまはとっくの昔にお気づきだろうが、ロンゴロンゴ式牛耕式は、別に一行ずつ180度回転させなくても、通常の牛耕式よりも読みやすいのだ。
ぜひロンゴロンゴ式牛耕式で表示する用の小説を送っていただきたい。`;
/* eslint-enable no-irregular-whitespace */

const App = () => {
  return (
    <BrowserRouter>
      <div className="container">
        <Routes>
          <Route path="/reverse/*" element={
            <h1 style={{
              textAlign: "center",
            }}><Link to="/reverse">裏牛耕式小説の勧め</Link></h1>
          } />
          <Route path="/*" element={
            <h1 style={{
              textAlign: "center",
              }}><Link to="/">牛耕式小説の勧め</Link></h1>
          } />
        </Routes>

        <Routes>
            <Route path="/" element={
              <div className="wrapper">
                <Boustrophedon body={description} id="description" />
              </div>} />
            <Route path="/example" element={
              <NovelViewer novel={sample} id="example" />}
              />
            <Route path="/post" element={<div className="wrapper"><p>投稿機能は現在準備中です。</p></div>} />
            <Route path="/reverse" element={
              <div className="wrapper">
                <Boustrophedon body={reverseDescription} id="reverse" reverse />
              </div>} />
            <Route path="/reverse/example" element={<NovelViewer novel={sample} id="reverse-example" reverse />} />
            <Route path="/reverse/post" element={<div className="wrapper"><p>投稿機能は現在準備中です。</p></div>} />
        </Routes>
        <Routes>
          <Route path="/reverse/*" element={
            <ul>
              <li><Link to="/reverse/example">例</Link></li>
              <li><Link to="/reverse/post">投稿</Link></li>
              <li><Link to="/">表サイトへの出口。</Link></li>
            </ul>} />
          <Route path="/*" element={
            <ul>
              <li><Link to="/example">例</Link></li>
              <li><Link to="/post">投稿</Link></li>
              <li>裏サイトの入り口は秘密です<Link to="/reverse">。</Link></li>
            </ul>} />
        </Routes>

      </div>
    </BrowserRouter>
  )
}

export default App
